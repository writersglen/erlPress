

-record(face, {font,
               pointSize,
               vOffset,
               color,
               breakable}).

-record(tagMap, {
     name=default,        % Tag name
                 font="Times-Roman",  % Font name
                 color=default,       % default | {R,G,B}
                 size=11,             % font size
                 voff=0,              % vertical offset
                 break=true           % can do line breaks in blanks
                }).

%%   RichTextTags = [Tag]

RichTextTags -> StandardTags

normalise_xml(XML, {StandardTags, TagMap}})

normalise_xml(XML, StandardTags, TagMap)

XML -> {Tag, Args, L1}

normalise_richText(L, TagMap)

normalise_xml(I, RichTextTags, TagMap)

Note: TagMap -> FontMap

normalise_richText(Items, FontMap)

normalise_inline(I, FontMap, L0)

normalise_inline({raw, Str}, FontMap, L)

normalise_tag(default, Str, FontMap, L)

normalise_tag(Tag, Str, FontMap, L)

get_face(Tag, FontMap)

get_face(Tag, [{Tag,Face}|_]) -> Face;
get_face(Tag, [_|T]) -> get_face(Tag, T);
get_face(Tag, []) ->
    dbg_io("There is no face associated with Tag=~p~n",[Tag]),
    eg_pdf:default_face().


default_tagMap(Pts) ->
    {[p],
     [{default,eg_richText:mk_face("Times-Roman", Pts, true, default, 0)},
      {em,     eg_richText:mk_face("Times-Italic", Pts, true, default, 0)},

      %% XXX !!! the font ZapfChancery-MediumItalic is not availible
      {red,    eg_richText:mk_face("ZapfChancery-MediumItalic", Pts, true,
                                   {1,0,0},0)},
      {blue,   eg_richText:mk_face("ZapfChancery-MediumItalic", Pts, true,
                                   {0,0,1},0)},

      {code,   eg_richText:mk_face("Courier", Pts, false, default, 0)},
      {b,      eg_richText:mk_face("Times-Bold", Pts, true, default, 0)},
      {hb,      eg_richText:mk_face("Helvetica-Bold", Pts, true, default, 0)},
      {helv,   eg_richText:mk_face("Helvetica", Pts, true, default, 0)}
     ]}.







normalise_str(Str, Face, L, skip_ws)
normalise_str(Str, Face, L, keep_ws)


