
%% ************************************************************
%% Beads
%% ************************************************************


Panel1 = ep_panel:create({1,1, top}, {72, 72}, {420, 100})

Panel2 = ep_panel:create({1, 2, continue}, {72, 172}, {200, 100})

Beads  = [Panel1, Panel2].


%% ************************************************************
%% Article 
%% ************************************************************

Copy        = ep_sample_text:article().

ArticleMap     = ep_article:create(Copy, Beads). 

Article = ep_article:get_article(ArticleMap).


%% ************************************************************
%% Panel functions 
%% ************************************************************

Panel = ep_article:get_panel(ArticleMap).




%% ************************************************************
%% Typestyle 
%% ************************************************************

TypeStyle = ep_article:get_typestyle(ArticleMap) ->
    maps:get(typestyle, ArticleMap). 


%% ************************************************************
%% Copy transforms 
%% ************************************************************


XML            = ep_block:parse_xml(Article).

[{xml, Xml} | XMLRest] = XML.

Tag            = element(1, Xml).

FontMap        = ep_typespec:get_fontmap(TypeStyle, Tag).

Norm           = ep_block:normalise_xml(Xml, FontMap).

{_, RichText}  = ep_block:rich_text(Norm).


Leading =      = ep_typespec:get_leading(TypeStyle, Tag) 

PanelMap        = ep_article:get_panel(ArticleMap).

Indent         = 30,
Indent         = ep_panel:get_indent(PanelMap)

Measure        = 450.
Measure        = ep_panel:get_measure(PanelMap)

Available      = ep_panel:get_available(PanelMap)


NLines         = Available div Leading. 

Margin         = 0.
Margin         = ep_panel:get_margin(PanelMap)

Justified      = justified.
Justified      = ep_typespec:get_justify(TypeStyle, Tag)

Widths         = ep_block:widths(Indent, Measure, Nlines).

Off = ep_block:offsets(Indent, Margin, NLines).

MaybeLines = ep_block:break_rich_text(RichText, Justified, Widths).

{Lines, _, _}   = MaybeLines.

AvailableLines       = NLines - length(Lines).

Fit function returns {Lines that will fit, Remaining Lines).

If Available < NLInes, need to execute fit function, paste lines that
will fit, get next panel, and recurse 

Paste function:

Code = ep_richText2pdf:richText2pdf(PDF, X, Y, Justify, 0, Lines that fit,
                                                Leading, Widths, Off)

yada yada


