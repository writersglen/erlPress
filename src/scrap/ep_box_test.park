%%% *********************************************************
%%% ep_box_test.erl
%%% Copyright:  {c) 2018  Lloyd R. Prentice
%%% Author:     Lloyd R. Prentice
%%% License: 
%%% File:       ep_box_test.erl
%%% Description: 
%%%    Print box 
%%% *********************************************************      


-module (ep_box_test).

-export([new/4, text/0, box/7, outer_box/5, inner_box/5, test/4 ]).
-export([get_panel/2, take_panel/2, put_panel/2]).
-export([test/0]).

-define(PDF_DIR, "pdf1").

%%% *********************************************************      
%%% Create page grid 
%%% *********************************************************      

new(X, Y, Measure, Height) ->
    Box = ep_box:create( X, Y, Measure, Height),
    Panel = {1, Box},
    [Panel|[]].

test() ->
   new(72, 720, 288, 288).


get_panel(N, Grid) ->
    lists:keyfind(N, 1, Grid).

take_panel(N, Grid) ->
    lists:keytake(N, 1, Grid).

put_panel(Panel, Grid) ->
    [Panel | Grid].
    


text() ->
    "This is normal text with some *emphasised term.* The TeX\nhyphenation algorithm is also implemented.\nI have also some *cursive text* and an example of\nan Erlang term. The term `{person, \"Joe\"}` is an Erlang term.\nThe variable *X*, was immediately followed by\na comma. The justification algorithm does proper _kerning_,\nwhich is more than *Microsoft Word* can do. AWAY again is\ncorrectly kerned! Erlang terms *{like, this}*\nare typeset in *courier*.".



box(PDF, OLColor, BGColor, X, Y, W, H) ->
    LineWidth = 1,
    eg_pdf:set_line_width(PDF, LineWidth),
    eg_pdf:set_stroke_color(PDF, OLColor),
    eg_pdf:set_fill_color(PDF, BGColor),
    eg_pdf:rectangle(PDF,{X, Y},{W,H}),
    eg_pdf:path(PDF, fill_stroke).

outer_box(PDF, X, Y, W, H) ->
    box(PDF, black, white, X, Y, W, H).

inner_box(PDF, X1, Y1, W1, H1) ->
    box(PDF, black, red, X1, Y1, W1, H1).


test(X, Y, W, H) ->
   B = 20,
   X1 = X + B,
   Y1 = Y + B,
   W1 = W - (2 * B),
   H1 = H - (2 * B),
   PDF = eg_pdf:new(),
   eg_pdf:set_pagesize(PDF, letter),
   eg_pdf:set_page(PDF, 1),

   outer_box(PDF, X, Y, W, H),
   inner_box(PDF, X1, Y1, W1, H1),

   {Serialized, _PageNo}  = eg_pdf:export(PDF),
   file:write_file("./pdf/test_box.pdf", [Serialized]),
   eg_pdf:delete(PDF).



%% Moved from ep_box.erl

%% @doc Print test box 1

-spec box_test1() -> ok.

box_test1() ->
   PaperStock = letter,
   OFile = "test_box1.pdf",
   Box = create(72, 0, 100, 100),
   print_box(Box, PaperStock, OFile).

%% @doc Print test box 2

-spec box_test2() -> ok.

box_test2() ->
   PaperStock = letter,
   OFile = "test_box2.pdf",
   Box  = create(72, 72, 100, 100),
   Box1 = update_border(Box, 1),
   Box2 = update_border_type(Box1, dashdot),
   Box3 = update_border_color(Box2, red),
   Box4 = update_fill_color(Box3, yellow),
   print_box(Box4, PaperStock, OFile).


%% @doc Print test box 2

-spec print_box(Box :: map(), PaperStock :: atom(), OFile :: string()) -> ok.

print_box(Box, PaperStock, OFile) ->
    Box1 = v_flip_box(Box, PaperStock),
    PDF  = eg_pdf:new(),

    ep_show_grid:show_grid(PDF, PaperStock),
    box(PDF, Box1),

   {Serialised, _PageNo} = eg_pdf:export(PDF),
    file:write_file(?PDF_DIR ++ OFile,[Serialised]),
    eg_pdf:delete(PDF).



%% ***********************************************************
%% Print box helper 
%% ***********************************************************

box(PDF, Box) ->
   X            = x(Box),
   Y            = y(Box),
   Width        = width(Box),
   Height       = height(Box),
   Border       = border(Box),
   BorderType   = border_type(Box),
   BorderColor  = border_color(Box),
   FillColor    = fill_color(Box),
   eg_pdf:set_line_width(PDF, Border),
   eg_pdf:set_dash(PDF, BorderType),
   eg_pdf:set_stroke_color(PDF, BorderColor),
   eg_pdf:set_fill_color(PDF, FillColor),
   eg_pdf:rectangle(PDF, {X, Y}, {Width, Height}),
   eg_pdf:path(PDF, fill_stroke).





